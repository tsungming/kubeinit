---
# Copyright kubeinit.com
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Configure the service node
  block:
    - name: "Install dispatch packages and arp filter"
      ansible.builtin.shell: |
        set -o pipefail
        #
        # Install the nm dispatcher packages
        #
        yum install NetworkManager-config-routing-rules -y
        systemctl enable NetworkManager-dispatcher.service
        systemctl start NetworkManager-dispatcher.service
        #
        # Make sure ARP responses will come only from
        # that interface where the request went
        #
        sysctl -w net.ipv4.conf.default.arp_filter=1
        sysctl -w net.ipv4.conf.all.arp_filter=1
        echo "net.ipv4.conf.all.arp_filter = 1" >> /etc/sysctl.conf
        echo "net.ipv4.conf.default.arp_filter=1" >> /etc/sysctl.conf
      args:
        executable: /bin/bash
      register: routing_dispatch
      changed_when: "routing_dispatch.rc == 0"
      when: kubeinit_libvirt_external_service_interface_enabled

    - name: "Configure Policy-Based-Routing Rules"
      ansible.builtin.shell: |
        set -o pipefail
        #
        # Policy based routing for the external interface
        #
        echo 200 external >> /etc/iproute2/rt_tables
        ip route add {{ (kubeinit_libvirt_external_service_interface.ip + "/" + kubeinit_libvirt_external_service_interface.netmask) | ansible.netcommon.ipaddr('network/prefix') }} dev eth1 table external
        ip route add default via {{ kubeinit_libvirt_external_service_interface.gateway }} dev eth1 table external
        ip rule add from {{ kubeinit_libvirt_external_service_interface.ip }}/32 table external
        ip rule add to {{ kubeinit_libvirt_external_service_interface.ip }}/32 table external
        ip rule add iif eth1 table external
        #
        # TODO:FIXME:BUG:WHYNOT: Check if the previous rules persist
        #
        # mkdir -p /etc/sysconfig/network-scripts/
        # echo "default via {{ kubeinit_libvirt_external_service_interface.gateway }} table external" >> /etc/sysconfig/network-scripts/route-{{ kubeinit_libvirt_external_service_interface.dev }}
        # echo "from {{ kubeinit_libvirt_external_service_interface.ip }} table external" >> /etc/sysconfig/network-scripts/rule-{{ kubeinit_libvirt_external_service_interface.dev }}
      args:
        executable: /bin/bash
      register: policy_routing
      changed_when: "policy_routing.rc == 0"
      when: kubeinit_libvirt_external_service_interface_enabled

    - name: install common requirements
      ansible.builtin.yum:
        name: "{{ kubeinit_eks_common_dependencies }}"
        state: present
        use_backend: dnf

    - name: Add the local DNS server as a local resolver
      ansible.builtin.lineinfile:
        path: /etc/resolv.conf
        line: "nameserver {{ hostvars[groups['all_service_nodes'] | list | first].ansible_host }}"
        insertbefore: nameserver.*

    #
    # Kubernetes config
    #

    - name: install requirements for kubectl
      ansible.builtin.package:
        name:
          - "kubectl-{{ kubeinit_eks_kubernetes_version }}"
        state: present

    - name: install services requirements
      ansible.builtin.yum:
        name: "{{ kubeinit_eks_service_dependencies }}"
        state: present
        use_backend: dnf

    #
    # Configure local registry
    #

    - name: "Get the required container images"
      ansible.builtin.shell: |
        set -o pipefail
        wget https://raw.githubusercontent.com/aws/eks-distro/main/development/pull-all.sh
        cat pull-all.sh | grep 'docker pull' | cut -d' ' -f3 > ~/kubeinit_deployment_images.txt
      args:
        executable: /bin/bash
      register: render_images_list
      changed_when: "render_images_list.rc == 0"

    - name: Configure a local container image registry
      # delegate_facts: true
      ansible.builtin.import_role:
        name: ../../roles/kubeinit_registry
        tasks_from: main
      vars:
        kubeinit_registry_container_engine: podman
      when: kubeinit_registry_enabled|bool

    #
    # Configure bind
    #

    - name: Configure Bind
      # delegate_facts: true
      ansible.builtin.import_role:
        name: ../../roles/kubeinit_bind
        tasks_from: main

    #
    # Configure HAproxy
    #

    - name: Configure HAProxy
      # delegate_facts: true
      ansible.builtin.import_role:
        name: ../../roles/kubeinit_haproxy
        tasks_from: main

    #
    # Configure httpd
    #

    - name: Configure Apache
      # delegate_facts: true
      ansible.builtin.import_role:
        name: ../../roles/kubeinit_apache
        tasks_from: main

    #
    # Include the install configuration
    #

    - name: "Render root keys in the service node"
      ansible.builtin.shell: |
        cd
        mkdir ~/.ssh
        ssh-keygen -t rsa -N "" -f .ssh/id_rsa <<< y
      register: render_service_keys
      changed_when: "render_service_keys.rc == 0"

    - name: get root service machine public key
      ansible.builtin.command: cat /root/.ssh/id_rsa.pub
      register: public_key_service_content
      changed_when: "public_key_service_content.rc == 0"

    - name: register the public key of the root service machine public key
      ansible.builtin.set_fact:
        kubeinit_provision_service_public_key={{ public_key_service_content.stdout }}

  delegate_to: "{{ hostvars[kubeinit_deployment_node_name].ansible_host }}"
  tags:
    - provision_libvirt
