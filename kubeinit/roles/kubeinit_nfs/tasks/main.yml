---
# Copyright 2020 KubeInit.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


# "kubeinit_nfs" will search for and load any operating system variable file

# found within the "vars/" path. If no OS files are found the task will skip.
- name: Gather variables for each operating system
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - skip: true
      files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_version.split('.')[0] }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
  tags:
    - always

- name: Install NFS packages
  ansible.builtin.package:
    name: "{{ kubeinit_nfs_packages }}"
    state: present


- name: "configure NFS shares of CentOS based guests"
  ansible.builtin.shell: |
    set -o pipefail
    systemctl enable nfs-server rpcbind
    systemctl start nfs-server rpcbind
    mkdir -p /var/nfsshare
    chmod -R 777 /var/nfsshare
    chown -R nobody:nobody /var/nfsshare
    echo '/var/nfsshare {{ kubeinit_inventory_network_net }}/{{ kubeinit_inventory_network_cidr }}(rw,sync,no_root_squash,no_all_squash,no_wdelay)' | tee /etc/exports
    setsebool -P nfs_export_all_rw 1
    systemctl restart nfs-server
  register: nfs_share_config
  changed_when: "nfs_share_config.rc == 0"
  when: kubeinit_inventory_cluster_distro == 'okd' or kubeinit_inventory_cluster_distro == 'k8s' or kubeinit_inventory_cluster_distro == 'eks'
  args:
    executable: /bin/bash

- name: "configure NFS shares of Ubuntu based guests"
  ansible.builtin.shell: |
    set -o pipefail
    mkdir -p /var/nfsshare
    chmod -R 777 /var/nfsshare
    chown -R nobody:nogroup /var/nfsshare
    echo '/var/nfsshare {{ kubeinit_inventory_network_net }}/{{ kubeinit_inventory_network_cidr }}(rw,sync,no_root_squash,no_all_squash,no_wdelay)' | tee /etc/exports
    exportfs -a
    systemctl restart nfs-kernel-server
  register: nfs_share_config
  changed_when: "nfs_share_config.rc == 0"
  when: kubeinit_inventory_cluster_distro == 'rke' or kubeinit_inventory_cluster_distro == 'cdk'
  args:
    executable: /bin/bash

#
# add nfs dynamic provisioning
#

- name: add nfs provisioning role
  ansible.builtin.shell: |
    cat << EOF > ~/nfs_rbac.yaml
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: nfs-client-provisioner
    ---
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: nfs-client-provisioner-runner
    rules:
      - apiGroups: [""]
        resources: ["persistentvolumes"]
        verbs: ["get", "list", "watch", "create", "delete"]
      - apiGroups: [""]
        resources: ["persistentvolumeclaims"]
        verbs: ["get", "list", "watch", "update"]
      - apiGroups: ["storage.k8s.io"]
        resources: ["storageclasses"]
        verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["create", "update", "patch"]
    ---
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: run-nfs-client-provisioner
    subjects:
      - kind: ServiceAccount
        name: nfs-client-provisioner
        namespace: default
    roleRef:
      kind: ClusterRole
      name: nfs-client-provisioner-runner
      apiGroup: rbac.authorization.k8s.io
    ---
    kind: Role
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: leader-locking-nfs-client-provisioner
    rules:
      - apiGroups: [""]
        resources: ["endpoints"]
        verbs: ["get", "list", "watch", "create", "update", "patch"]
    ---
    kind: RoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: leader-locking-nfs-client-provisioner
    subjects:
      - kind: ServiceAccount
        name: nfs-client-provisioner
        # replace with namespace where provisioner is deployed
        namespace: default
    roleRef:
      kind: Role
      name: leader-locking-nfs-client-provisioner
      apiGroup: rbac.authorization.k8s.io
    EOF
    export KUBECONFIG=~/.kube/config
    kubectl apply -f ~/nfs_rbac.yaml --request-timeout=1800s
  register: add_provisioning_role
  changed_when: "add_provisioning_role.rc == 0"
  args:
    executable: /bin/bash

- name: add nfs client provisioner deployment
  ansible.builtin.shell: |
    cat << EOF > ~/nfs_client_prov_deployment.yaml
    kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: nfs-client-provisioner
    spec:
      replicas: 1
      strategy:
        type: Recreate
      selector:
        matchLabels:
          app: nfs-client-provisioner
      template:
        metadata:
          labels:
            app: nfs-client-provisioner
        spec:
          serviceAccountName: nfs-client-provisioner
          containers:
            - name: nfs-client-provisioner
              image: gcr.io/k8s-staging-sig-storage/nfs-subdir-external-provisioner:v4.0.0
              volumeMounts:
                - name: nfs-client-root
                  mountPath: /persistentvolumes
              env:
                - name: PROVISIONER_NAME
                  value: k8s-sigs.io/nfs-subdir-external-provisioner
                - name: NFS_SERVER
                  value: {{ hostvars[ groups['all_service_nodes'] | list | first ].ansible_host }}
                - name: NFS_PATH
                  value: /var/nfsshare
          volumes:
            - name: nfs-client-root
              nfs:
                server: {{ hostvars[ groups['all_service_nodes'] | list | first ].ansible_host }}
                path: /var/nfsshare
    EOF
    export KUBECONFIG=~/.kube/config
    kubectl apply -f ~/nfs_client_prov_deployment.yaml --request-timeout=1800s
  register: add_provisioning_client
  changed_when: "add_provisioning_client.rc == 0"
  args:
    executable: /bin/bash

- name: add default nfs storage class
  ansible.builtin.shell: |
    cat << EOF > ~/nfs_storage_class.yaml
    apiVersion: storage.k8s.io/v1
    kind: StorageClass
    metadata:
      name: managed-nfs-storage
      annotations:
        storageclass.kubernetes.io/is-default-class: "true"
    provisioner: k8s-sigs.io/nfs-subdir-external-provisioner
    parameters:
      archiveOnDelete: "false"
    EOF
    export KUBECONFIG=~/.kube/config
    kubectl apply -f ~/nfs_storage_class.yaml --request-timeout=1800s
  register: add_storage_class
  changed_when: "add_storage_class.rc == 0"
  args:
    executable: /bin/bash

- name: add security context constraint for nfs provisioner
  ansible.builtin.shell: |
    cat << EOF > ~/nfs_scc.yaml
    apiVersion: security.openshift.io/v1
    kind: SecurityContextConstraints
    metadata:
      name: nfs-provisioner
    allowHostDirVolumePlugin: true
    allowHostIPC: false
    allowHostNetwork: false
    allowHostPID: false
    allowHostPorts: false
    allowPrivilegedContainer: false
    allowedCapabilities:
    - DAC_READ_SEARCH
    - SYS_RESOURCE
    defaultAddCapabilities: null
    fsGroup:
      type: MustRunAs
    priority: null
    readOnlyRootFilesystem: false
    requiredDropCapabilities:
    - KILL
    - MKNOD
    - SYS_CHROOT
    runAsUser:
      type: RunAsAny
    seLinuxContext:
      type: MustRunAs
    supplementalGroups:
      type: RunAsAny
    volumes:
    - configMap
    - downwardAPI
    - emptyDir
    - hostPath
    - nfs
    - persistentVolumeClaim
    - secret
    EOF
    export KUBECONFIG=~/.kube/config
    kubectl apply -f ~/nfs_scc.yaml --request-timeout=1800s
  register: add_sec_context
  changed_when: "add_sec_context.rc == 0"
  when: kubeinit_inventory_cluster_distro == 'okd'
  args:
    executable: /bin/bash

- name: apply nfs security policy to nfs user
  ansible.builtin.shell: |
    export KUBECONFIG=~/.kube/config
    oc adm policy add-scc-to-user nfs-provisioner -z nfs-client-provisioner
  register: apply_nfs_sec
  changed_when: "apply_nfs_sec.rc == 0"
  when: kubeinit_inventory_cluster_distro == 'okd'
  args:
    executable: /bin/bash

- name: Wait for the image registry operator to start its components
  ansible.builtin.shell: |
    export KUBECONFIG=~/.kube/config
    oc get configs.imageregistry.operator.openshift.io cluster
  register: iregistry_result
  retries: 60
  delay: 20
  until: iregistry_result.rc == 0
  changed_when: "iregistry_result.rc == 0"
  when: kubeinit_inventory_cluster_distro == 'okd'
  args:
    executable: /bin/bash

- name: patch imageregistry operator to claim storage
  ansible.builtin.shell: |
    # We patch the imageregistry operator to create a claim that managed-nfs-storage will satisfy
    export KUBECONFIG=~/.kube/config
    oc patch --request-timeout=1800s configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec": {"storage": {"pvc": {"claim": "" }}}}'
  register: patch_imageregistry_operator
  changed_when: "patch_imageregistry_operator.rc == 0"
  when: kubeinit_inventory_cluster_distro == 'okd'
  args:
    executable: /bin/bash

- name: patch imageregistry operator to move to Managed state
  ansible.builtin.shell: |
    export KUBECONFIG=~/.kube/config
    oc patch --request-timeout=1800s configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec": {"managementState": "Managed" }}'
  register: patch_imageregistry_operator
  changed_when: "patch_imageregistry_operator.rc == 0"
  when: kubeinit_inventory_cluster_distro == 'okd'
  args:
    executable: /bin/bash
